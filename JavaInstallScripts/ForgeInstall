#!/bin/bash

sudo apt update -qq
sudo apt install -y -qq jq curl

export MAIN_DIR=$(pwd)
echo -e 'fetching forge versions data...'
JSON_DATA=`curl -sSL https://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json`
FILE_SITE=https://maven.minecraftforge.net/net/minecraftforge/forge/
echo $MAIN_DIR

cd ..
rm ./startJavaServer
wget https://raw.githubusercontent.com/lordofwizard/mcserver/main/startJavaServer
chmod +x ./startJavaServer
mkdir -p server
cd server

echo -e '\nPlease visit https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json to check for available versions and choose accordingly'
# MC_VERSION : BUILD_TYPE: https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json
echo -e "\n> Enter Forge build type(default 1):"
echo -e "Type [1] recommended"
echo -e "Type [2] latest"
read BUILD_TYPE

# if no build type, use recommended
[[ -z $BUILD_TYPE ]] && BUILD_TYPE=1

if [[ $BUILD_TYPE -eq 1 ]]; then
	BUILD_TYPE=recommended

elif [[ $BUILD_TYPE -eq 2 ]]; then
	BUILD_TYPE=latest

else
	echo -e "Please enter the appropriate number"
	cd "$MAIN_DIR"
	./ForgeInstall
	exit
fi

echo -e "you chose $BUILD_TYPE"

echo -e "\n> Enter minecraft version: "
read MC_VERSION

if [ -z $MC_VERSION ] || [ "$MC_VERSION" == "latest" ]; then
	MC_VERSION=`echo -e ${JSON_DATA} | jq -r '.promos | to_entries[] | .key | select(contains("latest")) | split("-")[0]' | sort -t. -k2,2n -k3,3n -k4,4n | tail -1`
fi

if [ ! -z $FORGE_VERSION ]; then
	DOWNLOAD_LINK=https://maven.minecraftforge.net/net/minecraftforge/forge/${FORGE_VERSION}-${BUILD_TYPE}/forge-${FORGE_VERSION}
    	FORGE_JAR=forge-${FORGE_VERSION}*.jar

else

	echo -e "\nMinecraft version: ${MC_VERSION}"
	echo -e "Build Type: ${BUILD_TYPE}\n"

	## some variables for getting versions and things
	VERSION_KEY=`echo -e ${JSON_DATA} | jq -r --arg MC_VERSION "${MC_VERSION}" --arg BUILD_TYPE "${BUILD_TYPE}" '.promos | to_entries[] | .key | select(contains($BUILD_TYPE)) | select(contains($MC_VERSION))' | head -1`
	echo $VERSION_KEY

	## locating the forge version
    if [ "${VERSION_KEY}" == "" ] && [ "${BUILD_TYPE}" == "latest" ]; then
        echo -e "dropping back to latest from recommended due to there not being a recommended version of forge for the mc version requested."
        VERSION_KEY=`echo -e ${JSON_DATA} | jq -r --arg MC_VERSION "${MC_VERSION}" '.promos | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains("latest"))' | head -1`
    fi

	## Error if the mc version set wasn't valid.
    if [ "${VERSION_KEY}" == "" ] || [ "${VERSION_KEY}" == "null" ]; then
    	echo -e "The install failed because there is no valid version of forge for the version on minecraft selected."
    	exit 1
    fi

	FORGE_VERSION=`echo -e ${JSON_DATA} | jq -r --arg VERSION_KEY "$VERSION_KEY" '.promos | .[$VERSION_KEY]'`

	if [ "${MC_VERSION}" == "1.7.10" ] || [ "${MC_VERSION}" == "1.8.9" ]; then
        DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}/forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}
    
	else
        DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}/forge-${MC_VERSION}-${FORGE_VERSION}
	
	fi
fi

echo -e "Downloading forge version ${FORGE_VERSION}"
echo -e "Download link is ${DOWNLOAD_LINK}"
if [ ! -z "${DOWNLOAD_LINK}" ]; then 
    if curl --output /dev/null --silent --head --fail ${DOWNLOAD_LINK}-installer.jar; then
        echo -e "installer jar download link is valid."
    else
        echo -e "link is invalid closing out"
        exit 2
    fi
else
    echo -e "no download link closing out"
    exit 3
fi

curl -s -o installer.jar -sS ${DOWNLOAD_LINK}-installer.jar

#Checking if downloaded jars exist
if [ ! -f ./installer.jar ]; then
    echo "!!! Error by downloading forge version ${FORGE_VERSION} !!!"
    exit
fi

#Installing server
echo -e "Installing forge server.\n"
java -jar installer.jar --installServer || { echo -e "install failed"; exit 4; }

#Deleting installer.jar
echo -e "Deleting installer.jar file.\n"
rm -rf installer.jar

# creating launch file
cd $MAIN_DIR/../server
echo "eula=true" > eula.txt     # accepted the eula
FORGE_RUN_FILE=./run.sh
if [ -f "$FORGE_RUN_FILE" ]; then
    echo "#!/bin/bash
export JAVA=../bin/java_bins/bin/java

\$JAVA @user_jvm_args.txt @libraries/net/minecraftforge/forge/${MC_VERSION}-${FORGE_VERSION}/unix_args.txt \"\$@\"" > run.sh
    chmod +x ./run.sh

    echo '#!/bin/bash
cd server
./run.sh -nogui' > ../startJavaServer
    chmod +x ../startJavaServer

else
    # 1.7.10 thanks to Optifinel3ss#9059
    if [ "$MC_VERSION" == "1.8.9" ] || [ "$MC_VERSION" == "1.7.10" ]; then
        FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}-universal.jar
    else
        FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}.jar
    fi
    SERVER_JARFILE=server.jar
    mv $FORGE_JAR $SERVER_JARFILE

fi
